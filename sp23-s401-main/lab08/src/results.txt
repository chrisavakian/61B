BucketsSpeedTest:
What would you like L to be?: 5

Enter # strings to insert into each map: 1
MyHashMap with ArrayList buckets: 0.00 sec
MyHashMap with LinkedList buckets: 0.00 sec
MyHashMap with HashSet buckets: 0.00 sec
MyHashMap with Stack buckets: 0.00 sec
MyHashMap with ArrayDeque buckets: 0.00 sec

Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into each map: 50000
MyHashMap with ArrayList buckets: 0.24 sec
MyHashMap with LinkedList buckets: 0.16 sec
MyHashMap with HashSet buckets: 0.21 sec
MyHashMap with Stack buckets: 0.10 sec
MyHashMap with ArrayDeque buckets: 0.14 sec

Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into each map: 999999
MyHashMap with ArrayList buckets: 1.91 sec
MyHashMap with LinkedList buckets: 1.86 sec
MyHashMap with HashSet buckets: 2.66 sec
MyHashMap with Stack buckets: 1.72 sec
MyHashMap with ArrayDeque buckets: 1.47 sec

Would you like to try more timed-tests? (y/n)

For BucketsSpeedTest Hashset is slowest, then comes arraylist, then linkedList, then stack, then ArrayDeque.

InsertInOrderSpeedTest:
Enter # strings to insert into ULLMap: 9999
ULLMap: 0.56 sec

Enter # strings to insert into MyHashMap: 9999
MyHashMap: 0.01 sec

Enter # strings to insert into Java's HashMap: 9999
Java's Built-in HashMap: 0.00 sec

For InsertInOrderSpeedTest it seems like ULLMap is slowest, and MyHashMap and Java's HashMap are nearly the same, although mine is slower.

InsertRandomSpeedTest:
 This program inserts random Strings of length L
 into different types of maps as <String, Integer> pairs.

What would you like L to be?: 500

Enter # strings to insert into ULLMap: 9999
ULLMap: 1.13 sec

Enter # strings to insert into your MyHashMap: 9999
MyHashMap: 0.11 sec

Enter # strings to insert into Java's HashMap: 9999
Java's Built-in HashMap: 0.10 sec

For InsertRandomSpeedTest it seems like ULLMap is slowest, and MyHashMap and Java's HashMap are nearly the same, although mine is slower.

BST/TreeMap is better if you want to maintain some order of the keys, while HashMap is faster does not organize based on the keys.